name: Prepare Channels

on:
  workflow_call:
    inputs:
      ref:
        type: string
        required: true

    outputs:
      android:
        description: "Android Deployment Channel (Track)"
        value: ${{ jobs.android.outputs.output1 }}
      ios:
        description: "iOS Deployment Channel (Group)"
        value: ${{ jobs.ios.outputs.output1 }}
      linux:
        description: "Linux Deployment Channel (Channel)"
        value: ${{ jobs.linux.outputs.output1 }}
      macos:
        description: "macOS Deployment Channel (Group)"
        value: ${{ jobs.macos.outputs.output1 }}
      web:
        description: "Web Deployment Channel (Site ID)"
        value: ${{ jobs.web.outputs.output1 }}
      
jobs:
  android:
    name: Android
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.output.outputs.channel }}
    steps:
      - name: Run Script
        id: script
        uses: actions/github-script@v6
        env:
          FLAVOR: ${{ inputs.ref }}
        with:
          result-encoding: string
          script: |
            const ref = process.env.FLAVOR || "edge";
            switch (ref) {
              case "beta": return "alpha";
              case "candidate": return "beta";
              case "stable": return "production";
              case "edge":
              default: return "internal";
            }

      - name: Set Output
        id: output
        run: |
          echo ${{ steps.script.outputs.result }}
          echo "::set-output name=channel::${{ steps.script.outputs.result }}"

  ios:
    name: iOS
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.output.outputs.channel }}
    steps:
      - name: Run Script
        id: script
        uses: actions/github-script@v6
        env:
          FLAVOR: ${{ inputs.ref }}
        with:
          result-encoding: string
          script: |
            const ref = process.env.FLAVOR || "edge";
            switch (ref) {
              case "beta": return "beta";
              case "candidate": return "candidate";
              case "stable": return "stable";
              case "edge":
              default: return "edge";
            }

      - name: Set Output
        id: output
        run: |
          echo ${{ steps.script.outputs.result }}
          echo "::set-output name=channel::${{ steps.script.outputs.result }}"
  
  linux:
    name: Linux
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.output.outputs.channel }}
    steps:
      - name: Run Script
        id: script
        uses: actions/github-script@v6
        env:
          FLAVOR: ${{ inputs.ref }}
        with:
          result-encoding: string
          script: |
            const ref = process.env.FLAVOR || "edge";
            switch (ref) {
              case "beta": return "beta";
              case "candidate": return "candidate";
              case "stable": return "stable";
              case "edge":
              default: return "edge";
            }

      - name: Set Output
        id: output
        run: |
          echo ${{ steps.script.outputs.result }}
          echo "::set-output name=channel::${{ steps.script.outputs.result }}"

  macos:
    name: macOS
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.output.outputs.channel }}
    steps:
      - name: Run Script
        id: script
        uses: actions/github-script@v6
        env:
          FLAVOR: ${{ inputs.ref }}
        with:
          result-encoding: string
          script: |
            const ref = process.env.FLAVOR || "edge";
            switch (ref) {
              case "beta": return "beta";
              case "candidate": return "candidate";
              case "stable": return "stable";
              case "edge":
              default: return "edge";
            }

      - name: Set Output
        id: output
        run: |
          echo ${{ steps.script.outputs.result }}
          echo "::set-output name=channel::${{ steps.script.outputs.result }}"

  web:
    name: Web
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.output.outputs.channel }}
    steps:
      - name: Run Script
        id: script
        uses: actions/github-script@v6
        env:
          FLAVOR: ${{ inputs.ref }}
        with:
          result-encoding: string
          script: |
            const ref = process.env.FLAVOR || "edge";
            switch (ref) {
              case "beta": return "11ef2676-fc31-41b5-897b-fd21273d87ed";
              case "candidate": return "4636e6a1-17ef-45a2-a2b6-3d1c166fd1df";
              case "stable": return "6634f0b1-323c-4a2f-bd0b-8f1f388673a9";
              case "edge":
              default: return "325e197e-55f4-449a-b2bb-6831fe47bf2a";
            }

      - name: Set Output
        id: output
        run: |
          echo ${{ steps.script.outputs.result }}
          echo "::set-output name=channel::${{ steps.script.outputs.result }}"
